import numpy as np
import matplotlib.pyplot as plt
import sys

def load_mandelbrot_large(filename, width, height):
    """
    Loads a large Mandelbrot CSV file in chunks and returns a memory-mapped NumPy array.
    The file is expected to have 'height' rows, each with 'width' comma-separated integers.
    """
    # Create a memory-mapped file to avoid storing everything in RAM at once
    mandelbrot_map = np.memmap('mandelbrot_tmp.dat', dtype=np.int32, mode='w+', shape=(height, width))
    
    with open(filename, 'r') as f:
        for row_idx, line in enumerate(f):
            # Parse values in this row
            row_values = list(map(int, line.strip().split(',')))
            mandelbrot_map[row_idx, :] = row_values
    
    # Flush to ensure data is written to disk
    mandelbrot_map.flush()
    return mandelbrot_map

def plot_mandelbrot(arr, output_image='mandelbrot.png'):
    """
    Plots the mandelbrot data array using matplotlib and saves to an image.
    """
    plt.figure(dpi=100)
    plt.imshow(arr, cmap='hot', origin='lower', aspect='auto', interpolation='nearest')
    plt.axis('off')
    plt.savefig(output_image)
    plt.close()

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("Usage: python plot.py <output.csv>")
        sys.exit(1)
    
    RESOLUTION = int(sys.argv[1])
    MIN_X, MAX_X = -2, 1
    MIN_Y, MAX_Y = -1, 1
    WIDTH = int((MAX_X - MIN_X) * RESOLUTION)
    HEIGHT = int((MAX_Y - MIN_Y) * RESOLUTION)

    csv_file = "result.csv"         # The file generated by the CUDA code
    output_image = "mandelbrot.png" # Result image file

    # Load large CSV in chunks
    mandelbrot_data = load_mandelbrot_large(csv_file, WIDTH, HEIGHT)
    
    # Plot and save
    plot_mandelbrot(mandelbrot_data, output_image)
    print("Done. Image saved as", output_image)